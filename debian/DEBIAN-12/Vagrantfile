# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "packer_DEBIAN-12_vmware.box"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  cpuCore = 2
  memory = 2
  hostname = "DEBIAN-12-001"
  username = "tristiisch"
  password = "P@ssword!"
  networkMac = ("%02x" % (rand(128) * 2)) + ":" + (1..5).map { "%02x" % rand(256) }.join(":")
  # FC:7C:FF:5D:6F:E7
#   networkHostName = "vmnet8"

  # if Dir.glob("#{File.dirname(__FILE__)}/.vagrant/machines/#{VM_NAME}/*").empty? || ARGV[1] == '--provision'
  if ENV['ASK'] == 'true'

    print "CPU cores [#{cpuCore}]: "
    selected_cpuCore = STDIN.gets.chomp
    cpuCore = selected_cpuCore unless selected_cpuCore.empty?
    print "\n"

    print "Memory [#{memory} GB]: "
    selected_memory = STDIN.gets.chomp
    memory = selected_memory.to_i unless selected_memory.empty?
    print "\n"

    print "Hostname [#{hostname}]: "
    selected_hostname = STDIN.gets.chomp
    hostname = selected_hostname unless selected_hostname.empty?
    print "\n"

    print "Username [#{username}]: "
    selected_username = STDIN.gets.chomp
    username = selected_username unless selected_username.empty?
    print "\n"

    print "Password [#{password}]: "
    selected_password = STDIN.noecho(&:gets).chomp
    password = selected_password unless selected_password.empty?
    print "\n"

    print "MAC address [#{networkMac}]: "
    selected_networkMac = STDIN.gets.chomp
    networkMac = selected_networkMac unless selected_networkMac.empty?
    print "\n"

    # print "Host Network [#{networkHostName}]: "
    # selected_networkHostName = STDIN.gets.chomp
    # networkHostName = selected_networkHostName unless selected_networkHostName.empty?
    # print "\n"

  end

  config.vm.hostname = hostname
  config.vm.communicator = "ssh"
  config.ssh.username = username
  config.ssh.password = password

#   config.vm.network "private_network", auto_config: false
  config.vm.provision "shell", inline: <<-SHELL
    echo "Welcome to your Debian 12 Vagrant VM!"
    # You can add additional provisioning steps here
  SHELL

  config.vm.provider "vmware_desktop" do |vmware|
    vmware.gui = true
    vmware.allowlist_verified = true
    # MAC Address
    # vmware.base_mac = networkMac
    # VMWare link or deep copy
    vmware.linked_clone = false
    # VMWare name on library
    vmware.vmx["displayName"] = hostname

    # Number of CPU cores
    vmware.vmx["cpuid.coresPerSocket"] = cpuCore
    # Number of CPUs (need to multiply the value by 4)
    vmware.vmx["numvcpus"] = (1 * 4)
    # Memory in MB (var memory is in GB, then we convert to MB)
    vmware.vmx["memsize"] = memory * 1024

    # VMWare network use as primary network in guest
    # vmware.nat_device = networkHostName
	# Network
    # vmware.vmx["ethernet0.address"] = networkMac
    # vmware.vmx["ethernet0.addressType"] = "static"
    # vmware.vmx["ethernet0.virtualdev"] = "e1000e"
    # vmware.vmx["ethernet0.pcislotnumber"] = "193"

    # vmware.vmx["ethernet0.connectiontype"] = "custom"
    # vmware.vmx["ethernet0.vnet"] = "VMnet8"
    # vmware.vmx["ethernet0.displayName"] = "VMnet8"
    # vmware.vmx["ethernet0.pcislotnumber"] = "33"
    # vmware.vmx["ethernet0.pcislotnumber"] = "32"

    vmware.vmx["ethernet0.vnet"] = "VMnet8"
    vmware.vmx["ethernet0.connectiontype"] = "custom"
    # vmware.vmx["ethernet0.displayName"] = "VMnet8"
    vmware.vmx["ethernet0.virtualdev"] = "e1000"

    # Enable Virtualize usage in VM - Need to disable Hyper-V on Host to work
    vmware.vmx["vhv.enable"] = false

    # Virtualize CPU performance counter
    vmware.vmx["vpmc.enable"] = false

    # Allow shared folders between Host & Guest
    vmware.vmx["isolation.tools.hgfs.disable"] = true
  end
end
